# Logfile created on Thu Feb 03 22:34:07 -0500 2011 by /
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::ENETUNREACH: Network is unreachable - connect(2)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Errno::ENETUNREACH: Network is unreachable - connect(2)>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::ENETUNREACH: Network is unreachable - connect(2)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Errno::ENETUNREACH: Network is unreachable - connect(2)>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::WorklingConnectionError: MemCache::MemCacheError - IO timeout>
#<MemCache::MemCacheError: IO timeout>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Errno::ECONNREFUSED: Connection refused - connect(2)>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Base>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Discovery>
#<Gem::LoadError: Could not find RubyGem fiveruns-memcache-client (>= 0)
>
#<NameError: uninitialized constant Rails::Info>
#<SystemExit: exit>
#<Gem::LoadError: Could not find RubyGem hoptoad_notifier ()
>
#<NameError: uninitialized constant Workling::Base>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Base>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Discovery>
#<Gem::LoadError: Could not find RubyGem fiveruns-memcache-client (>= 0)
>
#<NameError: uninitialized constant Rails::Info>
#<SystemExit: exit>
#<Gem::LoadError: Could not find RubyGem hoptoad_notifier ()
>
#<NameError: uninitialized constant Workling::Base>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Base>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Discovery>
#<Gem::LoadError: Could not find RubyGem fiveruns-memcache-client (>= 0)
>
#<NameError: uninitialized constant Rails::Info>
#<SystemExit: exit>
#<Gem::LoadError: Could not find RubyGem hoptoad_notifier ()
>
#<NameError: uninitialized constant Workling::Base>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Base>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Discovery>
#<Gem::LoadError: Could not find RubyGem fiveruns-memcache-client (>= 0)
>
#<NameError: uninitialized constant Rails::Info>
#<SystemExit: exit>
#<Gem::LoadError: Could not find RubyGem hoptoad_notifier ()
>
#<NameError: uninitialized constant Workling::Base>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Mysql::Error: Too many connections>
#<Mysql::Error: Too many connections>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Workling::WorklingConnectionError: MemCache::MemCacheError - IO timeout>
#<MemCache::MemCacheError: IO timeout>
#<Timeout::Error: IO timeout>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Errno::ECONNREFUSED: Connection refused - connect(2)>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Errno::ECONNREFUSED: Connection refused - connect(2)>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: IO timeout>
#<Timeout::Error: IO timeout>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- xmlscan/scanner>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<MissingSourceFile: no such file to load -- jira4r>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Workling::WorklingConnectionError: MemCache::MemCacheError - IO timeout>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Workling::WorklingConnectionError: MemCache::MemCacheError - IO timeout>
#<MemCache::MemCacheError: IO timeout>
#<Timeout::Error: IO timeout>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- xmlscan/scanner>
#<MissingSourceFile: no such file to load -- jira4r>
#<EOFError: end of file reached>
#<EOFError: end of file reached>
#<Workling::WorklingConnectionError: MemCache::MemCacheError - IO timeout>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (113)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (113)>
#<Workling::WorklingConnectionError: MemCache::MemCacheError - IO timeout>
#<MemCache::MemCacheError: IO timeout>
#<Timeout::Error: IO timeout>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f278b837c00>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fb1c1db5b80>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f1ebaa8b800>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f753a10a1d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fcf8f448c00>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f83ceff33a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f78e266d5e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f8756406638>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fb7b42157a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f2b8d1b5cf0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fba0ca9e1d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f0017b1b5e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f656152f3a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fea6014a6c0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f56ad8f7b80>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f7ef674bcc0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fced9d46638>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f14f46d8cc8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fb4c5c73ce8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f35f3bef1d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ff0d8a3cc00>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fef9b488b58>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fe470ea71d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ff511b1fb80>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f3b8419dc20>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Errno::EHOSTUNREACH: No route to host - connect(2)>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fb37eda35e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f1a3f6be6c0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f75935746c0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fe31b273cf0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f13e778ec98>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f72c8b10a48>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fab2e095278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ff7d9ce6cc8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fb827166638>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f2b6e245b80>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f644237db80>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f41764b26c0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fa3d2cf1278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f404c8f7800>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fba67aba828>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f18c36d87a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f72cb00bb18>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f54191061d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fa80c1b9cf0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f86cc54cb58>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f41680bd208>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f24c1a70278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fb7c12cbc50>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f16fff1d750>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f6cba2961d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fc9f8a96e28>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f8f823055e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f848ec49cc0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ff025f131d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f72dabd5cf0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f4ab9f34c00>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f23906d35e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f78e26095e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fa9b57626c0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ff736bb6c98>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7feb04244b58>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f6f4b3cf5e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fb3187157a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f358967dcf0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fab9758b1d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f4667696b58>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fa6754efc50>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fb8745ce1d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fd26a8f7cf0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f2c22df8c20>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f5ff9be21d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f7f6aedb278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f1c274c1b80>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f0a3e9375e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f6ac17d2638>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f5330427b80>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f85bd1675e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f2992eeeb58>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fd42004c828>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f2d11a9f278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f7f86302c00>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ffc0f80bc50>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f02c43ebc50>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ffe4f0073a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f9b15b48b58>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f2a7cf46c50>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f73fc9965e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fd7fbd96ce8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f55c3650c00>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ff8fc375800>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fb5281ae638>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fa88088e1d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f4f5aa10828>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fcc6851c638>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fc0aee42c00>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f3f575d3278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f3da565e7a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ff4fa0895e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f045d7833a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f78e66e06c0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fe879006c98>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f9b3194e1d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f0f97256c98>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fa842b017a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f2ddb485cc8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f3f7237e1d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fca3f15e828>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f3eebd45c20>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f1f5e3cf800>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fee0c64f3a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fe2997fa7a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f70bb8181d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f052c113ce8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7efef2b5fcf0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f00282cc7a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f5f5897fb80>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fb0c82b13a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f8b970a1278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fb0297a27a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fcef4d0dc50>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f5722c3dcc0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fec44976c00>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f14c4afa278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ffbb1c42278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f581b51db80>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f6434072638>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7faf9c3cf278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f50d83077a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f0567ebc6c0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fc8251dc640>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fd94c48b7a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7feb443a3b80>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ffa0f560c00>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fd6b281e6c0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f3472be51d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f29d830b7a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fef60df3278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fcfafdd3c50>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f9c7562a1d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fd5e657b278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fbadc603800>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f310a861cc0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fc9858137a0>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f3b954bd1d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f2208e5f5e8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f6863f3a638>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fc45d3ea1d8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7ff0cea28cc8>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7f945566a828>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Routing>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Timeout::Error: execution expired>
#<#<Class:0x7fd0d6fe5278>: execution expired>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<SeleniumCommandError: /usr/lib/ruby/gems/1.8/gems/Selenium-1.1.14/lib/selenium/openqa/selenium.rb:173:in `do_command': Failed to start new browser session: Error while launching browser>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (113)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (113)>
#<Workling::WorklingConnectionError: MemCache::MemCacheError - end of file reached>
#<EOFError: end of file reached>
#<EOFError: end of file reached>
#<MemCache::MemCacheError: end of file reached>
#<ActiveRecord::StatementInvalid: Mysql::Error: MySQL server has gone away: SELECT max(`executions`.id) AS max_id, circuit_id,case_template_id AS circuit_id_case_template_id FROM `executions` WHERE ((`executions`.`suite_execution_id` = 60871))  GROUP BY circuit_id,case_template_id >
#<Mysql::Error: MySQL server has gone away>
#<MemCache::MemCacheError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<IndexError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<MemCache::MemCacheError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<IndexError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<ActiveRecord::StatementInvalid: Mysql::Error: MySQL server has gone away: SELECT * FROM `user_functions` >
#<Mysql::Error: MySQL server has gone away>
#<MemCache::MemCacheError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<IndexError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<MemCache::MemCacheError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<IndexError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<MemCache::MemCacheError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<IndexError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<ActiveRecord::StatementInvalid: Mysql::Error: MySQL server has gone away: SELECT * FROM `user_functions` >
#<Mysql::Error: MySQL server has gone away>
#<MemCache::MemCacheError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<IndexError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<MemCache::MemCacheError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<IndexError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<MemCache::MemCacheError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<IndexError: No connection to server (10.4.0.30:11211 DEAD (Timeout::Error: execution expired), will retry at Fri Mar 18 15:13:39 -0300 2011)>
#<Timeout::Error: execution expired>
#<#<Class:0x7ff27584dbf8>: execution expired>
#<EOFError: end of file reached>
#<EOFError: end of file reached>
#<MemCache::MemCacheError: end of file reached>
#<SeleniumCommandError: /usr/lib/ruby/gems/1.8/gems/Selenium-1.1.14/lib/selenium/openqa/selenium.rb:173:in `do_command': Failed to start new browser session: Error while launching browser>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Workling::WorklingConnectionError: MemCache::MemCacheError - IO timeout>
#<MemCache::MemCacheError: IO timeout>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: IO timeout>
#<Timeout::Error: IO timeout>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Workling::WorklingConnectionError: MemCache::MemCacheError - IO timeout>
#<NameError: uninitialized constant Workling::Remote>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Mysql::Error: Can't connect to MySQL server on '10.4.0.30' (111)>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
#<Errno::EAGAIN: Resource temporarily unavailable>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<NameError: uninitialized constant Workling::Remote>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<Workling::QueueserverNotFoundError: config/workling.yml configured to connect to queue server on 10.4.0.30:22122 for this environment. could not connect to queue server on this host:port. for starling users: pass starling the port with -p flag when starting it. If you don't want to use Starling, then explicitly set Workling::Remote.dispatcher (see README for an example)>
#<MemCache::MemCacheError: No active servers>
#<Errno::ECONNREFUSED: Connection refused - connect(2)>
#<NameError: uninitialized constant Workling::Remote::Invokers::ThreadedPoller>
#<NameError: uninitialized constant Workling::Remote::Invokers>
#<NameError: uninitialized constant Workling::Routing::ClassAndMethodRouting>
#<NameError: uninitialized constant Workling::Routing>
#<MissingSourceFile: no such file to load -- spawn>
#<NameError: uninitialized constant Workling::Remote>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<MissingSourceFile: no such file to load -- encoding/character/utf-8>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- rails>
#<ArgumentError: couldn't find HOME environment -- expanding `~'>
#<MissingSourceFile: no such file to load -- commonwatir>
#<MissingSourceFile: no such file to load -- encoding/character/utf-8>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<MissingSourceFile: no such file to load -- encoding/character/utf-8>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- rails>
#<ArgumentError: couldn't find HOME environment -- expanding `~'>
#<MissingSourceFile: no such file to load -- commonwatir>
#<MissingSourceFile: no such file to load -- encoding/character/utf-8>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<MissingSourceFile: no such file to load -- encoding/character/utf-8>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- rails>
#<ArgumentError: couldn't find HOME environment -- expanding `~'>
#<MissingSourceFile: no such file to load -- commonwatir>
#<MissingSourceFile: no such file to load -- encoding/character/utf-8>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<MissingSourceFile: no such file to load -- encoding/character/utf-8>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- rails>
#<ArgumentError: couldn't find HOME environment -- expanding `~'>
#<MissingSourceFile: no such file to load -- commonwatir>
#<MissingSourceFile: no such file to load -- encoding/character/utf-8>
*** below you find the most recent exception thrown, this will be likely (but not certainly) the exception that made the application exit abnormally ***
#<MissingSourceFile: no such file to load -- encoding/character/utf-8>
*** below you find all exception objects found in memory, some of them may have been thrown in your application, others may just be in memory because they are standard exceptions ***
#<NoMemoryError: failed to allocate memory>
#<SystemStackError: stack level too deep>
#<fatal: exception reentered>
#<MissingSourceFile: no such file to load -- rails>
#<ArgumentError: couldn't find HOME environment -- expanding `~'>
#<MissingSourceFile: no such file to load -- commonwatir>
#<MissingSourceFile: no such file to load -- encoding/character/utf-8>
